from typing import Any

def get_pointer(x: Any) -> int: ...

class DictIterator:
    def key(self) -> tuple[int, ...] | None: ...
    def value(self) -> int | None: ...
    def next(self) -> None: ...

class AtomicValue32:
    def load(self) -> int: ...
    def store(self, x: int) -> None: ...
    def swap(self, x: int) -> int: ...
    def add(self, x: int) -> int: ...
    def sub(self, x: int) -> int: ...
    def band(self, x: int) -> int: ...
    def bor(self, x: int) -> int: ...
    def bxor(self, x: int) -> int: ...
    def cas(self, expected: int, desired: int) -> int: ...

class AtomicValue64:
    def load(self) -> int: ...
    def store(self, x: int) -> None: ...
    def swap(self, x: int) -> int: ...
    def add(self, x: int) -> int: ...
    def sub(self, x: int) -> int: ...
    def band(self, x: int) -> int: ...
    def bor(self, x: int) -> int: ...
    def bxor(self, x: int) -> int: ...
    def cas(self, expected: int, desired: int) -> int: ...

class AtomicArray:
    def __init__(self, mv: memoryview, k64: int, k32: int, v64: int, v32: int) -> None: ...
    def index(self, *args: int) -> AtomicValue32 | AtomicValue64: ...
    def iterator(self) -> DictIterator: ...

